(function (React) {
	'use strict';

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var React__default = /*#__PURE__*/_interopDefault(React);

	function copyTextToClipboard(text, {target = document.body} = {}) {
		if (typeof text !== 'string') {
			throw new TypeError(`Expected parameter \`text\` to be a \`string\`, got \`${typeof text}\`.`);
		}

		const element = document.createElement('textarea');
		const previouslyFocusedElement = document.activeElement;

		element.value = text;

		// Prevent keyboard from showing on mobile
		element.setAttribute('readonly', '');

		element.style.contain = 'strict';
		element.style.position = 'absolute';
		element.style.left = '-9999px';
		element.style.fontSize = '12pt'; // Prevent zooming on iOS

		const selection = document.getSelection();
		const originalRange = selection.rangeCount > 0 && selection.getRangeAt(0);

		target.append(element);
		element.select();

		// Explicit selection workaround for iOS
		element.selectionStart = 0;
		element.selectionEnd = text.length;

		let isSuccess = false;
		try {
			isSuccess = document.execCommand('copy');
		} catch {}

		element.remove();

		if (originalRange) {
			selection.removeAllRanges();
			selection.addRange(originalRange);
		}

		// Get the focus back on the previously focused element, if any
		if (previouslyFocusedElement) {
			previouslyFocusedElement.focus();
		}

		return isSuccess;
	}

	const Btn = ({
	  record,
	  property,
	  ...props
	}) => {
	  const value = React__default.default.useMemo(() => record.params[property.path]);
	  const [isCopied, setIsCopied] = React__default.default.useState(false);
	  React.useEffect(() => {
	    if (isCopied) {
	      setTimeout(() => {
	        setIsCopied(state => !state);
	      }, 2000);
	    }
	  }, [isCopied]);
	  return /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("p", null, value, /*#__PURE__*/React__default.default.createElement("span", {
	    style: {
	      transition: "0.5s",
	      padding: "5px 10px",
	      borderRadius: 5,
	      backgroundColor: "green",
	      color: "white",
	      marginLeft: "10px",
	      cursor: "pointer"
	    },
	    onClick: async () => {
	      copyTextToClipboard(value);
	      setIsCopied(true);
	    }
	  }, isCopied ? "copied" : "copy")));
	};

	AdminJS.UserComponents = {};
	AdminJS.UserComponents.couponBtn = Btn;

})(React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvY29weS10ZXh0LXRvLWNsaXBib2FyZC9pbmRleC5qcyIsIi4uL3NyYy9kYXNoYm9hcmQvY29tcG9uZW50cy9jb3Vwb25Db2RlLmpzeCIsIi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb3B5VGV4dFRvQ2xpcGJvYXJkKHRleHQsIHt0YXJnZXQgPSBkb2N1bWVudC5ib2R5fSA9IHt9KSB7XG5cdGlmICh0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBwYXJhbWV0ZXIgXFxgdGV4dFxcYCB0byBiZSBhIFxcYHN0cmluZ1xcYCwgZ290IFxcYCR7dHlwZW9mIHRleHR9XFxgLmApO1xuXHR9XG5cblx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG5cdGNvbnN0IHByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cblx0ZWxlbWVudC52YWx1ZSA9IHRleHQ7XG5cblx0Ly8gUHJldmVudCBrZXlib2FyZCBmcm9tIHNob3dpbmcgb24gbW9iaWxlXG5cdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcblxuXHRlbGVtZW50LnN0eWxlLmNvbnRhaW4gPSAnc3RyaWN0Jztcblx0ZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdGVsZW1lbnQuc3R5bGUubGVmdCA9ICctOTk5OXB4Jztcblx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JzsgLy8gUHJldmVudCB6b29taW5nIG9uIGlPU1xuXG5cdGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXHRjb25zdCBvcmlnaW5hbFJhbmdlID0gc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwICYmIHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG5cdHRhcmdldC5hcHBlbmQoZWxlbWVudCk7XG5cdGVsZW1lbnQuc2VsZWN0KCk7XG5cblx0Ly8gRXhwbGljaXQgc2VsZWN0aW9uIHdvcmthcm91bmQgZm9yIGlPU1xuXHRlbGVtZW50LnNlbGVjdGlvblN0YXJ0ID0gMDtcblx0ZWxlbWVudC5zZWxlY3Rpb25FbmQgPSB0ZXh0Lmxlbmd0aDtcblxuXHRsZXQgaXNTdWNjZXNzID0gZmFsc2U7XG5cdHRyeSB7XG5cdFx0aXNTdWNjZXNzID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcblx0fSBjYXRjaCB7fVxuXG5cdGVsZW1lbnQucmVtb3ZlKCk7XG5cblx0aWYgKG9yaWdpbmFsUmFuZ2UpIHtcblx0XHRzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0c2VsZWN0aW9uLmFkZFJhbmdlKG9yaWdpbmFsUmFuZ2UpO1xuXHR9XG5cblx0Ly8gR2V0IHRoZSBmb2N1cyBiYWNrIG9uIHRoZSBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCwgaWYgYW55XG5cdGlmIChwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQpIHtcblx0XHRwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQuZm9jdXMoKTtcblx0fVxuXG5cdHJldHVybiBpc1N1Y2Nlc3M7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgY29weSBmcm9tIFwiY29weS10ZXh0LXRvLWNsaXBib2FyZFwiO1xuXG5jb25zdCBCdG4gPSAoeyByZWNvcmQsIHByb3BlcnR5LCAuLi5wcm9wcyB9KSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnBhdGhdKTtcbiAgY29uc3QgW2lzQ29waWVkLCBzZXRJc0NvcGllZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb3BpZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRJc0NvcGllZCgoc3RhdGUpID0+ICFzdGF0ZSk7XG4gICAgICB9LCAyMDAwKTtcbiAgICB9XG4gIH0sIFtpc0NvcGllZF0pO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8cD5cbiAgICAgICAge3ZhbHVlfVxuICAgICAgICA8c3BhblxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBcIjAuNXNcIixcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiNXB4IDEwcHhcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJncmVlblwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IFwiMTBweFwiLFxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvcHkodmFsdWUpO1xuICAgICAgICAgICAgc2V0SXNDb3BpZWQodHJ1ZSk7XG4gICAgICAgICAgfX0+XG4gICAgICAgICAge2lzQ29waWVkID8gXCJjb3BpZWRcIiA6IFwiY29weVwifVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdG47XG4iLCJBZG1pbkpTLlVzZXJDb21wb25lbnRzID0ge31cbmltcG9ydCBjb3Vwb25CdG4gZnJvbSAnLi4vc3JjL2Rhc2hib2FyZC9jb21wb25lbnRzL2NvdXBvbkNvZGUnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLmNvdXBvbkJ0biA9IGNvdXBvbkJ0biJdLCJuYW1lcyI6WyJCdG4iLCJyZWNvcmQiLCJwcm9wZXJ0eSIsInByb3BzIiwidmFsdWUiLCJSZWFjdCIsInVzZU1lbW8iLCJwYXJhbXMiLCJwYXRoIiwiaXNDb3BpZWQiLCJzZXRJc0NvcGllZCIsInVzZVN0YXRlIiwidXNlRWZmZWN0Iiwic2V0VGltZW91dCIsInN0YXRlIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidHJhbnNpdGlvbiIsInBhZGRpbmciLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsIm1hcmdpbkxlZnQiLCJjdXJzb3IiLCJvbkNsaWNrIiwiY29weSIsIkFkbWluSlMiLCJVc2VyQ29tcG9uZW50cyIsImNvdXBvbkJ0biJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztDQUFlLFNBQVMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7Q0FDakYsQ0FBQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtDQUMvQixFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxzREFBc0QsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ2pHLEVBQUU7QUFDRjtDQUNBLENBQUMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUNwRCxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztBQUN6RDtDQUNBLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDdEI7Q0FDQTtDQUNBLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdEM7Q0FDQSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztDQUNsQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztDQUNyQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztDQUNoQyxDQUFDLE9BQU8sQ0FB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
